@page "/quiz-create"
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>Quiz</PageTitle>

<h1>Create a quiz</h1>

@if (IsLoading)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="NewQuiz" OnValidSubmit="CreateQuizAsync">
        <div class="mb-3">
            <label>Quiz Name:</label>
            <InputText class="form-control" @bind-Value="NewQuiz.Name" />
        </div>
        <div class="mb-3">
            <label>Filter by Category:</label>
            <select class="form-select" @bind="selectedCategoryId">
                <option value="">-- All categories --</option>
                @foreach (var cat in Categories)
                {
                    <option value="@cat.Id">@cat.Name</option>
                }
            </select>
        </div>
        <div class="table-responsive-sm mt-4">
            <table class="table table-striped table-bordered table-sm">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Question</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var q in FilteredApprovedQuestions)
                    {
                        <tr>
                            <td>@(FilteredApprovedQuestions.ToList().IndexOf(q) + 1)</td>
                            <td>@q.QuestionText</td>
                            <td>@(q.Category.Name ?? "No category")</td>
                            <td>
                                <input class="form-check-input" type="checkbox" id="@q.Id"
                                       @onchange="e => ToggleQuestionSelection(q.Id, e.Value is bool b && b)"
                                       checked="@NewQuiz.Questions.Contains(q.Id)" />
                                <label class="form-check-label ms-2" for="@q.Id">
                                    Add to quiz
                                </label>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <button class="btn btn-success" type="submit">Create Quiz</button>
    </EditForm>
    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="mt-2">@Message</div>
    }
}

@code {
    private List<QuestionReadDto> Questions = new();
    private List<QuestionCategoryDto> Categories = new();
    private QuizWriteDto NewQuiz = new();
    private string? Message;
    private bool IsLoading = true;
    private string OwnerId = string.Empty;

    private string selectedCategoryId = "";

    protected override async Task OnInitializedAsync()
    {
        await AuthHelper.SetAuthorizationHeaderAsync(Http, JS);
        await LoadCategoriesAsync();
        await LoadQuestionsAsync();
        OwnerId = await Quizerio.Client.Helpers.AuthHelper.GetUserIdAsync(JS);
    }

    private async Task LoadQuestionsAsync()
    {
        IsLoading = true;
        try
        {
            Questions = await Http.GetFromJsonAsync<List<QuestionReadDto>>("Question") ?? new();
        }
        catch (Exception ex)
        {
            Message = $"Error loading questions: {ex.Message}";
        }
        IsLoading = false;
    }

    private async Task LoadCategoriesAsync()
    {
        try
        {
            Categories = await Http.GetFromJsonAsync<List<QuestionCategoryDto>>("QuestionCategory") ?? new();
        }
        catch
        {
            Categories = new();
        }
    }

    private IEnumerable<QuestionReadDto> FilteredApprovedQuestions =>
        Questions
            .Where(q => q.Status == "Approved" &&
                (string.IsNullOrEmpty(selectedCategoryId) || q.Category.Id.ToString() == selectedCategoryId));

    private void ToggleQuestionSelection(Guid questionId, bool isSelected)
    {
        if (isSelected)
        {
            if (!NewQuiz.Questions.Contains(questionId))
                NewQuiz.Questions.Add(questionId);
        }
        else
        {
            NewQuiz.Questions.Remove(questionId);
        }
    }

    private async Task CreateQuizAsync()
    {
        Message = null;
        if (string.IsNullOrWhiteSpace(NewQuiz.Name))
        {
            Message = "Quiz name is required.";
            return;
        }
        if (NewQuiz.Questions.Count == 0)
        {
            Message = "Please select at least one question.";
            return;
        }
        if (string.IsNullOrWhiteSpace(OwnerId) || !Guid.TryParse(OwnerId, out _))
        {
            Message = "Owner ID could not be identified. Please log in and try again.";
            return;
        }

        QuizWriteDto createQuizCommand = new QuizWriteDto
        {
            Name = NewQuiz.Name,
            OwnerId = Guid.Parse(OwnerId),
            Questions = NewQuiz.Questions
        };

        try
        {
            var response = await Http.PostAsJsonAsync("Quiz", createQuizCommand);
            if (response.IsSuccessStatusCode)
            {
                Message = "Quiz created successfully!";
                NewQuiz = new QuizWriteDto();
            }
            else
            {
                Message = $"Error creating quiz: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            Message = $"Error creating quiz: {ex.Message}";
        }
    }

    private class QuizWriteDto
    {
        public string Name { get; set; } = string.Empty;
        public List<Guid> Questions { get; set; } = new();
        public Guid OwnerId { get; set; } = Guid.Empty;
    }
    private class QuestionCategoryDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
    private class QuestionReadDto
    {
        public Guid Id { get; set; }
        public string QuestionText { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public QuestionCategoryDto Category { get; set; } = new();
    }
}
