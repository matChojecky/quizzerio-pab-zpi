@page "/quiz-list"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>Quiz List</PageTitle>

<h1>Quiz List</h1>

<button class="btn btn-primary mb-3" @onclick="GetQuizzesByOwnerAsync">Load Quizzes</button>

@if (!IsQuizLoading)
{
    <div class="table-responsive-sm">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Quiz Name</th>
                    <th>Questions (with Category)</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var quiz in Quizzes)
                {
                    <tr>
                        <td>@quiz.Name</td>
                        <td>
                            <ul>
                                @foreach (var q in quiz.Questions)
                                {
                                    <li>
                                        @q.QuestionText
                                        <span class="text-muted">
                                            @if (q.Category != null)
                                            {
                                                @($"({q.Category.Name})")
                                            }
                                            else
                                            {
                                                <span class="text-danger">No category</span>
                                            }
                                        </span>
                                    </li>
                                }
                            </ul>
                        </td>
                        <td>
                            <button class="btn btn-success" @onclick="() => StartQuiz(quiz.Id)">Start Quiz</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if (IsQuizLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (QuizErrorMessage != null)
{
    <div class="alert alert-danger">@QuizErrorMessage</div>
}

@code {
    private string OwnerId = string.Empty;
    private List<QuizDto> Quizzes = new();
    private bool IsQuizLoading = false;
    private string? QuizErrorMessage;
    private List<QuestionCategoryDto> Categories = new();

    protected override async Task OnInitializedAsync()
    {
        Http.BaseAddress = new Uri("https://localhost:7180/");
        await AuthHelper.SetAuthorizationHeaderAsync(Http, JS);
        await GetCategoriesAsync();
        await GetQuizzesByOwnerAsync();
        OwnerId = await Quizerio.Client.Helpers.AuthHelper.GetUserIdAsync(JS);
    }

    private async Task GetCategoriesAsync()
    {
        try
        {
            Categories = await Http.GetFromJsonAsync<List<QuestionCategoryDto>>("QuestionCategory") ?? new();
        }
        catch
        {
            Categories = new();
        }
    }

    private async Task GetQuizzesByOwnerAsync()
    {
        QuizErrorMessage = null;
        IsQuizLoading = true;
        try
        {
            Quizzes = await Http.GetFromJsonAsync<List<QuizDto>>("Quiz") ?? new();
        }
        catch (Exception ex)
        {
            QuizErrorMessage = $"Error loading quizzes: {ex.Message}";
        }
        IsQuizLoading = false;
    }

    private async void StartQuiz(Guid quizId)
    {
        var quiz = Quizzes.FirstOrDefault(q => q.Id == quizId);
        if (quiz != null)
        {
            try
            {
                var response = await Http.PostAsync($"QuizGame/{quizId}", null);
                if (response.IsSuccessStatusCode)
                {
                    var quizGameId = await response.Content.ReadFromJsonAsync<Guid>();
                    var url = $"/game-create?quizGameId={quizGameId}&quizName={Uri.EscapeDataString(quiz.Name)}";
                    Navigation.NavigateTo(url);
                }
                else
                {
                    QuizErrorMessage = $"Failed to start quiz game: {response.ReasonPhrase}";
                }
            }
            catch (Exception ex)
            {
                QuizErrorMessage = $"Error starting quiz game: {ex.Message}";
            }
        }
    }

    public class QuizDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public List<QuizQuestionDto> Questions { get; set; } = new();
    }

    public class QuizQuestionDto
    {
        public Guid Id { get; set; }
        public string QuestionText { get; set; } = string.Empty;
        public QuestionCategoryDto Category { get; set; } = new();
    }

    public class QuestionCategoryDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}
