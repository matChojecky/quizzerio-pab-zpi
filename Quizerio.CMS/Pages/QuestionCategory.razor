@page "/categories"

@inject HttpClient Http

<PageTitle>Categories</PageTitle>

<h1>Categories</h1>

<button class="btn btn-primary" @onclick="GetQuestionCategoryAsync">Load current categories</button>

@if (questionCategories != null)
{
    <div class="table-responsive mt-4">
        <table class="table table-striped table-sm table-bordered">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Category name</th>
                    <th>Number of questions</th>
                </tr>
            </thead>
            <tbody>
                
                @foreach (var category in questionCategories)
                {
                    <tr>
                        <td class="fw-bold">@(questionCategories.IndexOf(category) + 1)</td>
                        <td>@category.Name</td>
                        <td>
                            @(questionsPerCategory.TryGetValue(category.Id, out var count) ? count : 0)
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if (isLoading)
{
    <div class="d-flex justify-content-center mt-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger mt-4" role="alert">
        <i class="oi oi-warning me-2"></i>
        @errorMessage
    </div>
}

<hr />

<h2>Add new category</h2>
<div class="mb-3">
    <label>Category label:</label>
    <input class="form-control" @bind="newQuestionCategory.Name" />
</div>


<button class="btn btn-success" @onclick="AddQuestionCategoryAsync">Add category</button>
@if (addQuestionMessage != null)
{
    <p>@addQuestionMessage</p>
}

@code {
    private bool isLoading = false;
    private string? errorMessage;

    private List<QuestionCategoryDto> questionCategories = new();
    private QuestionCategoryDto newQuestionCategory = new();
    private Dictionary<Guid, int> questionsPerCategory = new Dictionary<Guid, int>();

    private string? addQuestionMessage;

    protected override async Task OnInitializedAsync()
    {
        await GetQuestionCategoryAsync();
    }

    private async Task GetQuestionCategoryAsync()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            questionsPerCategory.Clear();
            questionCategories = await Http.GetFromJsonAsync<List<QuestionCategoryDto>>("https://localhost:7180/QuestionCategory") ?? new();
            var questions = await Http.GetFromJsonAsync<List<QuestionReadDto>>("https://localhost:7180/Question") ?? new();

            foreach (var category in questionCategories)
            {
                questionsPerCategory.Add(category.Id, questions.Count(q => q.Category.Id == category.Id));
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error while loading categories: {ex.Message}";
        }
        isLoading = false;
    }

    private async Task AddQuestionCategoryAsync()
    {
        addQuestionMessage = null;

        if (string.IsNullOrWhiteSpace(newQuestionCategory.Name))
        {
            addQuestionMessage = "Question category label should not be empty!";
            return;
        }

        var writeModel = new QuestionCategoryDto
        {
            Name = newQuestionCategory.Name
        };

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7180/QuestionCategory", writeModel);
            if (response.IsSuccessStatusCode)
            {
                addQuestionMessage = "Question Category added!";
                newQuestionCategory = new QuestionCategoryDto();
                await GetQuestionCategoryAsync();
            }
            else
            {
                addQuestionMessage = $"Error: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            addQuestionMessage = $"Error while trying to add category: {ex.Message}";
        }
    }
}