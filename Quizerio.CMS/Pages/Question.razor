@page "/questions"
@inject HttpClient Http

<PageTitle>Questions</PageTitle>

<h1>Questions</h1>

<button class="btn btn-primary" @onclick="GetQuestionsAsync">Load current questions</button>

@if (questions != null)
{
    <div class="table-responsive-sm mt-4">
        <table class="table table-striped table-bordered table-sm">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Question</th>
                    <th>Category</th>
                    <th>Difficulty</th>
                    <th>Answers</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var q in questions)
                {
                    <tr class="@(q.Status == "Rejected" ? "table-warning" : "")">
                        <td class="fw-bold">@(questions.IndexOf(q) + 1)</td>
                        @if (editingQuestionId == q.Id)
                        {
                            <td>
                                <input class="form-control form-control-sm" @bind="editedQuestion!.QuestionText" />
                            </td>
                            <td>
                                <select class="form-select form-select-sm" @bind="editedQuestion!.Category.Id">
                                    @foreach (var cat in categories)
                                    {
                                        <option value="@cat.Id">@cat.Name</option>
                                    }
                                </select>
                            </td>
                            <td>
                                <select class="form-select form-select-sm" @bind="editedQuestion!.Difficulty">
                                    <option value="0">Easy</option>
                                    <option value="1">Medium</option>
                                    <option value="2">Hard</option>
                                </select>
                            </td>
                            <td>
                                <div class="d-flex flex-column gap-1">
                                    @for (int i = 0; i < editedQuestion!.Answers.Length; i++)
                                    {
                                        var index = i;
                                        <div class="input-group input-group-sm">
                                            <input type="radio"
                                                   class="btn-check"
                                                   name="editCorrectAnswer"
                                                   id="edit-answer-@index"
                                                   autocomplete="off"
                                                   checked="@editedQuestion.Answers[index].IsCorrect"
                                                   @onchange="() => SetEditedCorrectAnswer(index)" />
                                            <label class="btn btn-outline-success input-group-text" for="edit-answer-@index">
                                                <i class="oi oi-check"></i>
                                            </label>
                                            <input type="text"
                                                   class="form-control form-control-sm"
                                                   @bind="editedQuestion.Answers[index].Text" />
                                        </div>
                                    }
                                </div>
                            </td>
                            <td>@q.Status</td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-success" @onclick="SaveEditedQuestion" title="Save changes">
                                        <i class="oi oi-check"></i>
                                    </button>
                                    <button class="btn btn-sm btn-secondary" @onclick="CancelEdit" title="Cancel editing">
                                        <i class="oi oi-x"></i>
                                    </button>
                                </div>
                            </td>
                        }
                        else
                        {
                            <td>@q.QuestionText</td>
                            <td>
                                @(categories.FirstOrDefault(c => c.Id == q.Category.Id)?.Name ?? "N/A")
                            </td>
                            <td>@q.Difficulty</td>
                            <td>
                                <div class="d-flex flex-column gap-1">
                                    @foreach (var answer in q.Answers)
                                    {
                                        <div class="@(answer.IsCorrect ? "text-start fw-bold" : "")">
                                            @if (answer.IsCorrect)
                                            {
                                                <i class="oi oi-check"></i>
                                            }
                                            else
                                            {
                                                <i class="oi oi-x"></i>
                                            }
                                            @answer.Text
                                        </div>
                                    }
                                </div>
                            </td>
                            <td>@q.Status</td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="@(e => ApproveQuestionAsync(q.Id))" title="Approve this question">
                                        <i class="oi oi-circle-check"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="@(e => RejectQuestionAsync(q.Id))" title="Reject this question">
                                        <i class="oi oi-circle-x"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="@(e => DeleteQuestionAsync(q.Id))" title="Delete this question">
                                        <i class="oi oi-trash"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-info" @onclick="@(e => EditQuestion(q.Id))" title="Edit this question">
                                        <i class="oi oi-pencil"></i>
                                    </button>
                                </div>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if (isLoading)
{
    <div class="d-flex justify-content-center mt-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger mt-4" role="alert">
        <i class="oi oi-warning me-2"></i>
        @errorMessage
    </div>
}

<hr />

<h2>Add new question</h2>
<form>
    <div class="mb-3">
        <label>Question:</label>
        <input class="form-control" @bind="newQuestion.QuestionText" />
    </div>

    <div class="row">
        <div class="col mb-3">
            <label>Difficulty level:</label>
            <select class="form-select" @bind="newQuestion.Difficulty">
                <option value="0">Easy</option>
                <option value="1">Medium</option>
                <option value="2">Hard</option>
            </select>
        </div>

        <div class="col mb-3">
            <label>Question category:</label>
            <select class="form-select" @bind="newQuestion.CategoryId">
                <option value="">-- Question category --</option>
                @foreach (var cat in categories)
                {
                    <option value="@cat.Id">@cat.Name</option>
                }
            </select>
        </div>
    </div>

    <div class="mb-3">
        <label>Answers:</label>
        @for (int i = 0; i < newQuestion.Answers.Length; i++)
        {
            var index = i;
            <div class="input-group mb-2">
                <input type="radio"
                       class="btn-check"
                       name="correctAnswer"
                       id="answer-@index"
                       autocomplete="off"
                       checked="@newQuestion.Answers[index].IsCorrect"
                       @onchange="() => SetCorrectAnswer(index)" />
                <label class="btn btn-outline-success input-group-text" for="answer-@index">
                    <i class="oi oi-check"></i>
                </label>
                <input type="text"
                       class="form-control"
                       placeholder="Answer #@(index + 1)"
                       @bind="newQuestion.Answers[index].Text" />
            </div>
        }
    </div>
</form>
<button class="btn btn-success" @onclick="AddQuestionAsync">Add question</button>
@if (addQuestionMessage != null)
{
    <p>@addQuestionMessage</p>
}

@code {

    private List<QuestionReadDto>? questions;
    private bool isLoading = false;
    private string? errorMessage;

    private List<QuestionCategoryDto> categories = new();
    private QuestionWriteDto newQuestion = new();

    private string? addQuestionMessage;

    private Guid? editingQuestionId;
    private QuestionReadDto? questionToEdit;
    private QuestionReadDto? editedQuestion;

    protected override void OnInitialized()
    {
        Http.BaseAddress = new Uri("https://localhost:7180/");
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCategoriesAsync();
        await GetQuestionsAsync();
    }

    private async Task GetQuestionsAsync()
    {
        isLoading = true;
        errorMessage = null;
        questions = null;
        try
        {
            questions = await Http.GetFromJsonAsync<List<QuestionReadDto>>("Question");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error while loading questions: {ex.Message}";
        }
        isLoading = false;
    }

    private async Task GetCategoriesAsync()
    {
        try
        {
            categories = await Http.GetFromJsonAsync<List<QuestionCategoryDto>>("QuestionCategory") ?? new();
        }
        catch
        {
            categories = new();
        }
    }

    private void SetCorrectAnswer(int selectedIndex)
    {
        for (int i = 0; i < newQuestion.Answers.Length; i++)
        {
            newQuestion.Answers[i].IsCorrect = (i == selectedIndex);
        }
    }

    private async Task AddQuestionAsync()
    {
        addQuestionMessage = null;

        if (string.IsNullOrWhiteSpace(newQuestion.QuestionText))
        {
            addQuestionMessage = "Question field should not be empty!";
            return;
        }

        if (newQuestion.CategoryId == Guid.Empty)
        {
            addQuestionMessage = "You must select a category!";
            return;
        }

        if (newQuestion.Answers.Length != 4 ||
            newQuestion.Answers.Any(a => string.IsNullOrWhiteSpace(a.Text)) ||
            newQuestion.Answers.Count(a => a.IsCorrect == true) != 1)
        {
            addQuestionMessage = "You must provide exactly 4 answers, each answer must not be empty, and exactly one answer must be marked as correct!";
            return;
        }

        var writeModel = new QuestionWriteDto
        {
            QuestionText = newQuestion.QuestionText,
            Difficulty = newQuestion.Difficulty,
            CategoryId = newQuestion.CategoryId,
            Answers = newQuestion.Answers.Select(a => new AnswerDto
            {
                Id = Guid.NewGuid(),
                Text = a.Text,
                IsCorrect = a.IsCorrect
            }).ToArray()
        };

        try
        {
            var response = await Http.PostAsJsonAsync("Question", writeModel);
            if (response.IsSuccessStatusCode)
            {
                addQuestionMessage = "Question added successfully!";
                newQuestion = new();
                await GetQuestionsAsync();
            }
            else
            {
                addQuestionMessage = $"Error: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            addQuestionMessage = $"Error while adding question: {ex.Message}";
        }
    }

    private async Task ApproveQuestionAsync(Guid questionId)
    {
        try
        {
            var response = await Http.PatchAsync($"Question/{questionId}/approve", null);
            if (response.IsSuccessStatusCode)
            {
                await GetQuestionsAsync();
            }
            else
            {
                errorMessage = $"Error while approving question: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error while approving question: {ex.Message}";
        }
    }

    private async Task RejectQuestionAsync(Guid questionId)
    {
        try
        {
            var rejectContent = JsonContent.Create("CMS reject");
            var response = await Http.PatchAsync($"Question/{questionId}/reject", rejectContent);

            if (response.IsSuccessStatusCode)
            {
                await GetQuestionsAsync();
            }
            else
            {
                errorMessage = $"Error while rejecting question: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error while rejecting question: {ex.Message}";
        }
    }

    private async Task DeleteQuestionAsync(Guid questionId)
    {
        try
        {
            var response = await Http.DeleteAsync($"Question/{questionId}");

            if (response.IsSuccessStatusCode)
            {
                await GetQuestionsAsync();
            }
            else
            {
                errorMessage = $"Error while deleting question: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error while deleting question: {ex.Message}";
        }
    }

    private void EditQuestion(Guid questionId)
    {
        if (questions == null) return;
        questionToEdit = questions.FirstOrDefault(q => q.Id == questionId);
        if (questionToEdit == default) return;

        editedQuestion = new QuestionReadDto
        {
            QuestionText = questionToEdit.QuestionText,
            Category = { Id = questionToEdit.Category.Id, Name = questionToEdit.Category.Name },
            Difficulty = questionToEdit.Difficulty,
            Answers = questionToEdit.Answers.Select(a => new AnswerDto
            {
                Id = a.Id,
                Text = a.Text,
                IsCorrect = a.IsCorrect
            }).ToArray()
        };

        editingQuestionId = questionId;
    }

    private void SetEditedCorrectAnswer(int selectedIndex)
    {
        if (editedQuestion == null) return;

        for (int i = 0; i < editedQuestion.Answers.Length; i++)
        {
            editedQuestion.Answers[i].IsCorrect = (i == selectedIndex);
        }
    }

    private async Task SaveEditedQuestion()
    {
        if (editedQuestion == null) return;

        if (string.IsNullOrWhiteSpace(editedQuestion.QuestionText))
        {
            errorMessage = "Question field should not be empty!";
            return;
        }

        if (editedQuestion.Category.Id == Guid.Empty)
        {
            errorMessage = "You must select a category!";
            return;
        }

        if (editedQuestion.Answers.Length != 4 ||
            editedQuestion.Answers.Any(a => string.IsNullOrWhiteSpace(a.Text)) ||
            editedQuestion.Answers.Count(a => a.IsCorrect == true) != 1)
        {
            errorMessage = "You must provide exactly 4 answers, each answer must not be empty, and exactly one answer must be marked as correct!";
            return;
        }

        try
        {
            QuestionWriteDto editedQuestionData = new QuestionWriteDto
            {
                QuestionText = editedQuestion.QuestionText,
                Difficulty = editedQuestion.Difficulty,
                CategoryId = editedQuestion.Category.Id,
                Answers = editedQuestion.Answers.Select(a => new AnswerDto
                {
                    Id = a.Id,
                    Text = a.Text,
                    IsCorrect = a.IsCorrect
                }).ToArray()
            };
            var response = await Http.PutAsJsonAsync($"Question/{editingQuestionId}", editedQuestionData);
            if (response.IsSuccessStatusCode)
            {
                await GetQuestionsAsync();
                CancelEdit();
            }
            else
            {
                errorMessage = $"Error updating question: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating question: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        editingQuestionId = null;
        editedQuestion = null;
        errorMessage = null;
    }

    private async Task GetQuestionToEditById(Guid questionId)
    {
        try
        {
            questionToEdit = await Http.GetFromJsonAsync<QuestionReadDto>($"Question/{questionId}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error while fetching question: {ex.Message}";
        }
    }
}