@page "/login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Logging
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ILogger<Login> Logger

<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <ul class="nav nav-tabs card-header-tabs">
                        <li class="nav-item">
                            <button class="nav-link @(isLogin ? "active" : "")" @onclick="() => isLogin = true">Sign In</button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link @(isLogin ? "" : "active")" @onclick="() => isLogin = false">Sign Up</button>
                        </li>
                    </ul>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show mb-3" role="alert">
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = null" aria-label="Close"></button>
                        </div>
                    }

                    @if (isLogin)
                    {
                        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group mb-3">
                                <label for="email">Email</label>
                                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                                <ValidationMessage For="@(() => loginModel.Email)" />
                            </div>

                            <div class="form-group mb-3">
                                <label for="password">Password</label>
                                <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" />
                                <ValidationMessage For="@(() => loginModel.Password)" />
                            </div>

                            <button type="submit" class="btn btn-primary">Sign In</button>
                        </EditForm>
                    }
                    else
                    {
                        <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group mb-3">
                                <label for="username">Username</label>
                                <InputText id="username" class="form-control" @bind-Value="registerModel.Username" />
                                <ValidationMessage For="@(() => registerModel.Username)" />
                            </div>

                            <div class="form-group mb-3">
                                <label for="registerEmail">Email</label>
                                <InputText id="registerEmail" class="form-control" @bind-Value="registerModel.Email" />
                                <ValidationMessage For="@(() => registerModel.Email)" />
                            </div>

                            <div class="form-group mb-3">
                                <label for="registerPassword">Password</label>
                                <InputText type="password" id="registerPassword" class="form-control" @bind-Value="registerModel.Password" />
                                <ValidationMessage For="@(() => registerModel.Password)" />
                            </div>

                            <button type="submit" class="btn btn-primary">Sign Up</button>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLogin = true;
    private LoginModel loginModel = new();
    private RegisterModel registerModel = new();
    private string? errorMessage;

    protected override void OnInitialized()
    {
        Http.BaseAddress = new Uri("https://localhost:7180/");
    }

    private async Task HandleLogin()
    {
        errorMessage = null; // Clear any previous error
        try
        {
            var response = await Http.PostAsJsonAsync("/Auth/login", new
            {
                Email = loginModel.Email,
                Password = loginModel.Password
            });

            if (response.IsSuccessStatusCode)
            {
                // Read token from response (assuming JSON: { "token": "..." })
                var json = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (json?.access_token is not null)
                {
                    // Store token in localStorage
                    await JS.InvokeVoidAsync("localStorage.setItem", "authToken", json.access_token);

                    // Optionally, set Authorization header for HttpClient
                    Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", json.access_token);
                    Logger.LogInformation($"User logged in successfully. access_token: {json.access_token}");

                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Login failed. No token received.";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = !string.IsNullOrEmpty(errorContent)
                    ? errorContent
                    : "Login failed. Please check your credentials and try again.";
            }
        }
        catch (Exception)
        {
            errorMessage = "Login failed. Please check your credentials and try again.";
        }
    }

    private async Task HandleRegister()
    {
        errorMessage = null; // Clear any previous error
        try
        {
            UserModel userModel = new UserModel
            {
                Username = registerModel.Username,
                Email = registerModel.Email,
                Password = registerModel.Password,
                Roles = new List<string> { "Standard" }
            };
            var response = await Http.PostAsJsonAsync("User", userModel);
            
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = !string.IsNullOrEmpty(errorContent) 
                    ? errorContent 
                    : "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again later.";
        }
    }

    private class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }

    private class RegisterModel
    {
        [Required]
        [MinLength(3)]
        public string Username { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [MinLength(6)]
        public string Password { get; set; } = string.Empty;
    }

    private class UserModel : RegisterModel
    {
        public List<string> Roles { get; set; }
    }

    private class LoginResponse
    {
        public string access_token { get; set; }
    }
}